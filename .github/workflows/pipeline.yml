name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Build and Test All Services
        run: |
          for service in utilisateur config-server discovery-server gateway; do
            mvn -f $service/pom.xml clean package -DskipTests=true
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            */target/*.jar
          retention-days: 1

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push Docker Images
        env:
            DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          services=(config-server discovery-server gateway utilisateur)
          timestamp=$(date '+%Y%m%d%H%M%S')
          
          for service in "${services[@]}"; do
            echo "Building and pushing image for $service"
            # Update image name to include Docker Hub username
            docker build -t $DOCKER_USERNAME/$service:latest -t $DOCKER_USERNAME/$service:$timestamp -f ./$service/Dockerfile ./$service
            
            # Push both tags
            docker push $DOCKER_USERNAME/$service:latest
            docker push $DOCKER_USERNAME/$service:$timestamp
          done
      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin
          docker compose version

      # Deploy with Docker Compose
      - name: Deploy with Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d
